pub fn pt1(numbers: &[u32]) -> Option<u32> {
    let mut occurrences = [0; 2021];

    for n in numbers {
        if *n <= 2020 {
            occurrences[*n as usize] += 1;
        }
    }

    for n in 0..1010 {
        if occurrences[n] > 0 && occurrences[2020 - n] > 0 {
            return Some(n as u32 * (2020 - n) as u32);
        }
    }

    if occurrences[1010] > 1 {
        Some(1010 * 1010)
    } else {
        None
    }
}

pub fn pt2(numbers: &[u32]) -> Option<u32> {
    let mut occurrences = [0; 2021];

    for n in numbers {
        if *n <= 2020 {
            occurrences[*n as usize] += 1;
        }
    }

    for n in 0..1010 {
        if occurrences[n] > 0 {
            occurrences[n] -= 1;

            let sub: u32 = 2020 - n as u32;
            for s in 0..sub / 2 {
                if occurrences[s as usize] > 0 && occurrences[(sub - s) as usize] > 0 {
                    return Some(n as u32 * s * (sub - s));
                }
            }

            if sub % 2 == 0 && occurrences[(sub / 2) as usize] > 1 {
                return Some(n as u32 * sub / 2 * sub / 2);
            }

            occurrences[n] += 1;
        }
    }

    None
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn day1_pt1_test() {
        let a = [1010, 1010, 3456];
        assert_eq!(pt1(&a), Some(1010 * 1010));

        let b = [3, 1010, 3456];
        assert_eq!(pt1(&b), None);

        let c = [345, 2020 - 345, 3456];
        assert_eq!(pt1(&c), Some(345 * (2020 - 345)));
    }

    #[test]
    fn day1_pt2_test() {
        let a = [10, 10, 2000, 3456];
        assert_eq!(pt2(&a), Some(10 * 10 * 2000));

        let b = [1010, 1010, 3456];
        assert_eq!(pt2(&b), None);

        let c = [345, 42, 2020 - 345 - 42, 3456];
        assert_eq!(pt2(&c), Some(345 * 42 * (2020 - 345 - 42)));
    }
}

#[macro_export]
macro_rules! day1_input {
    () => {
        [
            1941, 1887, 1851, 1874, 1612, 1960, 1971, 1983, 1406, 1966, 1554, 1892, 1898, 1926,
            1081, 1992, 1073, 1603, 177, 1747, 1063, 1969, 1659, 1303, 1759, 1853, 1107, 1818,
            1672, 1352, 2002, 1838, 1985, 1860, 1141, 1903, 1334, 1489, 1178, 1823, 1499, 1951,
            1225, 1503, 1417, 1724, 1165, 1339, 1816, 1504, 1588, 1997, 1946, 1324, 1771, 1982,
            1272, 1367, 1439, 1252, 1902, 1940, 1333, 1750, 1512, 1538, 1168, 2001, 1797, 1233,
            972, 1306, 1835, 1825, 1822, 1880, 1732, 1785, 1727, 1275, 1355, 1793, 1485, 1297,
            1932, 1519, 1587, 1382, 1914, 1745, 1087, 1996, 1746, 1962, 1573, 2008, 1868, 1278,
            1386, 1238, 1242, 1170, 1476, 1161, 1754, 1807, 1514, 1189, 1916, 1884, 1535, 1217,
            1911, 1861, 1493, 1409, 1783, 1222, 1955, 1673, 1502, 607, 2010, 1846, 1819, 1500,
            1799, 1475, 1146, 1608, 1806, 1660, 1618, 1904, 978, 1762, 1925, 1185, 1154, 1239,
            1843, 1986, 533, 1509, 1913, 287, 1707, 1115, 1699, 1859, 1077, 1915, 1412, 1360, 1646,
            1973, 1627, 1755, 1748, 1769, 1886, 1422, 1686, 950, 100, 1372, 1068, 1370, 1428, 1870,
            1108, 190, 1891, 1794, 1228, 1128, 1365, 1740, 1888, 1460, 1758, 1906, 1917, 1989,
            1251, 1866, 1560, 1921, 1777, 1102, 1850, 1498, 683, 1840, 1800, 1112, 1908, 1442,
            1082, 1071,
        ]
    };
}
